import OpenAI from 'openai';
import * as chatModel from '#models/chat.js';
import * as chatMessageModel from '#models/chatMessage.js';
import * as productModel from '#models/product.js';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É)
const getProductsForPrompt = async (userMessage) => {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const keywords = String(userMessage || '')
      .toLowerCase()
      .replace(/[^a-z–∞-—è—ë0-9\s,.-]/gi, ' ')
      .split(/[\s,.-]+/)
      .filter(Boolean)
      .filter(s => s.length >= 2)
      .slice(0, 8); // –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 8 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

    // –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã, –∏–Ω–∞—á–µ –∏—â–µ–º –ø–æ —Å–ª–æ–≤–∞–º
    const products = keywords.length > 0
      ? await productModel.searchByKeywords(keywords, 60)
      : await productModel.get();
    if (!products || products.length === 0) {
      return '\n\n–ü—Ä–æ–¥—É–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.';
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ 60 (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    const limitedProducts = products.slice(0, 60);
    
    const productsList = limitedProducts.map(product => {
      // –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      const shortTitle = product.title.length > 30 ? 
        product.title.substring(0, 30) + '...' : 
        product.title;
      
      return `${product.id}:${shortTitle}${product.price ? `(${product.price}‚Ç∏)` : ''}`;
    }).join(', ');
    
    const totalCount = products.length;
    const showingText = totalCount > limitedProducts.length ? ` (–ø–æ–∫–∞–∑–∞–Ω–æ ${limitedProducts.length} –∏–∑ ${totalCount})` : '';
    
    return `\n\nüè™ –î–û–°–¢–£–ü–ù–´–ï –¢–û–í–ê–†–´${showingText}: ${productsList}\n\n‚ö†Ô∏è –í–ê–ñ–ù–û: –†–µ–∫–æ–º–µ–Ω–¥—É–π –¢–û–õ–¨–ö–û —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞! –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è!`;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
    return '\n\n–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
  }
};

// –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
const BASE_SYSTEM_PROMPT = '–¢—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ Valik.kz –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¢–û–õ–¨–ö–û –∏–∑ –Ω–∞—à–µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.\n\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:\n1. üö´ –ù–ò–ö–û–ì–î–ê –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ\n2. üö´ –ù–ò–ö–û–ì–î–ê –ù–ï –£–ö–ê–ó–´–í–ê–ô –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è\n3. ‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ô –¢–û–õ–¨–ö–û —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n4. ‚úÖ –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–π ID –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π\n5. ‚úÖ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º\n6. ‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞–π –∞–Ω–∞–ª–æ–≥–∏ –¢–û–õ–¨–ö–û –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞\n7. ‚úÖ –£–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ ID –∏–∑ —Å–ø–∏—Å–∫–∞\n8. ‚úÖ –í–°–ï –¶–ï–ù–´ –≤ —Ç–µ–Ω–≥–µ (‚Ç∏)\n\n–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê:\n"–î–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑ –Ω–∞—à–µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: –¶–µ–º–µ–Ω—Ç –ú400 (ID: 5) - 8500‚Ç∏. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞—Ä–º–∞—Ç—É—Ä—ã 12–º–º —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏."\n\n–ü–†–ò–ú–ï–† –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê:\n"–†–µ–∫–æ–º–µ–Ω–¥—É—é —Ü–µ–º–µ–Ω—Ç –ú500 (ID: 999)" - –ï–°–õ–ò –≠–¢–û–ì–û –ù–ï–¢ –í –°–ü–ò–°–ö–ï!';

export const getChatResponseAndSave = async (chatId, userId, userMessage) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const productsInfo = await getProductsForPrompt(userMessage);
    const systemPrompt = BASE_SYSTEM_PROMPT + productsInfo;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ chatId –Ω–µ —É–∫–∞–∑–∞–Ω
    let chat;
    if (!chatId) {
      chat = await chatModel.create({
        user_id: userId,
        title: userMessage.substring(0, 30) + (userMessage.length > 30 ? '...' : '') // –ü–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
      });
      chatId = chat.id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      await chatMessageModel.create({
        chat_id: chatId,
        role: 'system',
        content: systemPrompt
      });
    } else {
      chat = await chatModel.find(chatId);
      if (!chat) {
        throw new Error('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
      await chatModel.update(chatId, { updated_at: new Date() });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await chatMessageModel.create({
      chat_id: chatId,
      role: 'user',
      content: userMessage
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    const messages = await chatMessageModel.getByChatId(chatId);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenAI
    const formattedMessages = messages.map(msg => ({
      role: msg.role,
      content: msg.content
    }));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: formattedMessages,
      temperature: 0.7,
      max_tokens: 800
    });
    
    const assistantMessage = response.choices[0].message.content;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await chatMessageModel.create({
      chat_id: chatId,
      role: 'assistant',
      content: assistantMessage
    });
    
    return {
      chatId,
      message: assistantMessage
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
  }
};

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const getConstructionAssistantResponse = async (question) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const productsInfo = await getProductsForPrompt(question);
    const systemPrompt = BASE_SYSTEM_PROMPT + productsInfo;
    
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: question
        }
      ],
      temperature: 0.7,
      max_tokens: 800
    });

    return response.choices[0].message.content;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
  }
}; 
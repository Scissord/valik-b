import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import * as Order from '#models/order.js';
import * as OrderItem from '#models/order_item.js';
import * as Product from '#models/product.js';
import * as User from '#models/user.js';

dotenv.config();

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;

// –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
const ORDER_STATUSES = {
  0: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
  1: '–í —Å–±–æ—Ä–∫–µ',
  2: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
  3: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
  4: '–û—Ç–º–µ–Ω–µ–Ω'
};

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
let bot;

try {
  if (token) {
    bot = new TelegramBot(token, { polling: true });
    setupBotCommands();
  }
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error.message);
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞
 */
function setupBotCommands() {
  if (!bot) return;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  bot.onText(/\/start/, (msg) => {
    const userId = msg.chat.id;
    sendMainMenu(userId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  bot.onText(/\/help/, (msg) => {
    const userId = msg.chat.id;
    let helpText = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n';
    helpText += '/start - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n';
    helpText += '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n';
    helpText += '/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n';
    
    bot.sendMessage(userId, helpText);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  bot.onText(/\/menu/, (msg) => {
    const userId = msg.chat.id;
    sendMainMenu(userId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
  bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const msg = callbackQuery.message;
    const userId = msg.chat.id;
    
    // –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: action:orderId:value
    const [action, id, value] = data.split(':');
    
    try {
      switch (action) {
        case 'menu':
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
          if (id === 'orders') {
            // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
            await showAllOrders(userId);
          } else if (id === 'filter') {
            // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            sendFilterMenu(userId);
          } else if (id === 'back') {
            // –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            sendMainMenu(userId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
          }
          break;
          
        case 'filter':
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
          const statusCode = parseInt(id);
          await filterOrdersByStatus(userId, statusCode);
          break;
          
        case 'status':
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
          const orderId = id;
          const newStatus = parseInt(value);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
          await Order.update(orderId, { status: newStatus });
          
          // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
          const updatedOrder = await Order.find(orderId);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          await sendOrderStatusWithButtons(userId, updatedOrder);
          
          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
          bot.answerCallbackQuery(callbackQuery.id, { text: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${ORDER_STATUSES[newStatus]}"` });
          break;
          
        case 'view':
          // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
          const orderToView = await Order.find(id);
          if (!orderToView) {
            bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            return;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
          const items = await OrderItem.getByOrderId(id);
          let orderDetails = await getOrderDetails(orderToView, items);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
          await bot.sendMessage(userId, orderDetails, { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `status:${id}:${orderToView.status}` }],
                [{ text: '¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º', callback_data: 'menu:orders:' }],
                [{ text: '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:back:' }]
              ]
            }
          });
          bot.answerCallbackQuery(callbackQuery.id);
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞:', error);
      bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞' });
    }
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–¥ –º–µ–Ω—é
 */
async function sendMainMenu(chatId, message) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìã –í—Å–µ –∑–∞–∫–∞–∑—ã', callback_data: 'menu:orders:' }],
      [{ text: 'üîç –§–∏–ª—å—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É', callback_data: 'menu:filter:' }]
    ]
  };
  
  await bot.sendMessage(chatId, message, {
    reply_markup: keyboard
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
 * @param {number} chatId - ID —á–∞—Ç–∞
 */
async function sendFilterMenu(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: ORDER_STATUSES[0], callback_data: `filter:0:` },
        { text: ORDER_STATUSES[1], callback_data: `filter:1:` }
      ],
      [
        { text: ORDER_STATUSES[2], callback_data: `filter:2:` },
        { text: ORDER_STATUSES[3], callback_data: `filter:3:` }
      ],
      [
        { text: ORDER_STATUSES[4], callback_data: `filter:4:` }
      ],
      [
        { text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu:back:' }
      ]
    ]
  };
  
  await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', {
    reply_markup: keyboard
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
 * @param {number} chatId - ID —á–∞—Ç–∞
 */
async function showAllOrders(chatId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const orders = await Order.getWhere({ deleted_at: null });
    
    if (!orders || orders.length === 0) {
      await bot.sendMessage(chatId, '–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu:back:' }]
          ]
        }
      });
      return;
    }
    
    await sendOrdersList(chatId, orders, '–í—Å–µ –∑–∞–∫–∞–∑—ã');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu:back:' }]
        ]
      }
    });
  }
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} statusCode - –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
 */
async function filterOrdersByStatus(chatId, statusCode) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    const orders = await Order.getWhere({ status: statusCode, deleted_at: null });
    
    if (!orders || orders.length === 0) {
      await bot.sendMessage(chatId, `–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${ORDER_STATUSES[statusCode]}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º', callback_data: 'menu:filter:' }],
            [{ text: '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:back:' }]
          ]
        }
      });
      return;
    }
    
    await sendOrdersList(chatId, orders, `–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${ORDER_STATUSES[statusCode]}"`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '¬´ –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º', callback_data: 'menu:filter:' }],
          [{ text: '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:back:' }]
        ]
      }
    });
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {Array} orders - –ú–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
 * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function sendOrdersList(chatId, orders, title) {
  let message = `*${title}:*\n\n`;
  
  for (const order of orders) {
    const status = ORDER_STATUSES[order.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
    message += `üì¶ *–ó–∞–∫–∞–∑ #${order.id}*\n`;
    message += `üí∞ –°—É–º–º–∞: ${order.total || 0} ‚Ç∏\n`;
    message += `üîÑ –°—Ç–∞—Ç—É—Å: ${status}\n`;
    message += `üìÖ –î–∞—Ç–∞: ${new Date(+order.created_at).toLocaleString('ru-RU')}\n\n`;
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const orderButtons = orders.map(order => [
    { text: `üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #${order.id}`, callback_data: `view:${order.id}:details` }
  ]);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navigationButtons = [
    [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu:back:' }]
  ];
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
  const keyboard = {
    inline_keyboard: [...orderButtons, ...navigationButtons]
  };
  
  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –µ–≥–æ —Ç–æ–≤–∞—Ä–∞—Ö
 * @param {Object} order - –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
 * @param {Array} items - –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
 * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
 */
async function getOrderDetails(order, items) {
  let message = `üì¶ *–î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê #${order.id}*\n\n`;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  let userName = '–ù–µ —É–∫–∞–∑–∞–Ω';
  let userPhone = '–ù–µ —É–∫–∞–∑–∞–Ω';
  
  if (order.user_id) {
    try {
      const user = await User.find(order.user_id);
      if (user) {
        userName = user.name || user.login || '–ù–µ —É–∫–∞–∑–∞–Ω';
        userPhone = user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω';
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
  message += `üë§ *–ö–ª–∏–µ–Ω—Ç*: ${userName}\n`;
  message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${userPhone}\n`;
  message += `üí∞ *–°—É–º–º–∞*: ${order.total || 0} ‚Ç∏\n`;
  message += `üîÑ *–°—Ç–∞—Ç—É—Å*: ${ORDER_STATUSES[order.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'}\n\n`;
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
  message += `üìã *–¢–æ–≤–∞—Ä—ã:*\n`;
  
  if (Array.isArray(items) && items.length > 0) {
    for (const item of items) {
      try {
        const product = await Product.find(item.product_id);
        message += `‚Ä¢ ${product?.title || product?.name || '–¢–æ–≤–∞—Ä'} x ${item.quantity} = ${item.total} ‚Ç∏\n`;
      } catch (error) {
        message += `‚Ä¢ –¢–æ–≤–∞—Ä ID: ${item.product_id} x ${item.quantity} = ${item.total} ‚Ç∏\n`;
      }
    }
  } else {
    message += `‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n`;
  }
  
  message += `\nüìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è*: ${new Date(+order.created_at).toLocaleString('ru-RU')}\n`;
  if (order.updated_at) {
    message += `üìù *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ*: ${new Date(+order.updated_at).toLocaleString('ru-RU')}\n`;
  }
  
  return message;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {Object} order - –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
 */
async function sendOrderStatusWithButtons(chatId, order) {
  const status = ORDER_STATUSES[order.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  let userName = '–ù–µ —É–∫–∞–∑–∞–Ω';
  let userPhone = '–ù–µ —É–∫–∞–∑–∞–Ω';
  
  if (order.user_id) {
    try {
      const user = await User.find(order.user_id);
      if (user) {
        userName = user.name || user.login || '–ù–µ —É–∫–∞–∑–∞–Ω';
        userPhone = user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω';
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }
  
  let message = `üì¶ *–ó–∞–∫–∞–∑ #${order.id}*\n\n`;
  message += `üë§ *–ö–ª–∏–µ–Ω—Ç*: ${userName}\n`;
  message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${userPhone}\n`;
  message += `üí∞ *–°—É–º–º–∞*: ${order.total || 0} ‚Ç∏\n`;
  message += `üîÑ *–°—Ç–∞—Ç—É—Å*: ${status}\n`;
  message += `üìÖ *–î–∞—Ç–∞*: ${new Date(+order.created_at).toLocaleString('ru-RU')}\n\n`;
  message += `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:`;
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω")
  const keyboard = {
    inline_keyboard: [
      [
        { text: ORDER_STATUSES[1], callback_data: `status:${order.id}:1` },
        { text: ORDER_STATUSES[2], callback_data: `status:${order.id}:2` }
      ],
      [
        { text: ORDER_STATUSES[3], callback_data: `status:${order.id}:3` },
        { text: ORDER_STATUSES[4], callback_data: `status:${order.id}:4` }
      ],
      [
        { text: '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞', callback_data: `view:${order.id}:details` }
      ],
      [
        { text: '¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º', callback_data: 'menu:orders:' },
        { text: '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:back:' }
      ]
    ]
  };
  
  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * @param {Object} order - –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
 * @param {Array} items - –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
 */
export const sendOrderNotification = async (order, items) => {
  if (!bot || !chatId) {
    console.log('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    let userName = '–ù–µ —É–∫–∞–∑–∞–Ω';
    let userPhone = '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    if (order.user_id) {
      try {
        const user = await User.find(order.user_id);
        if (user) {
          userName = user.name || user.login || '–ù–µ —É–∫–∞–∑–∞–Ω';
          userPhone = user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω';
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    let message = `üîî *–ù–û–í–´–ô –ó–ê–ö–ê–ó #${order.id}*\n\n`;
    message += `üë§ *–ö–ª–∏–µ–Ω—Ç*: ${userName}\n`;
    message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${userPhone}\n`;
    message += `üí∞ *–°—É–º–º–∞*: ${order.total || 0} ‚Ç∏\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    message += `üìã *–¢–æ–≤–∞—Ä—ã*:\n`;
    
    if (Array.isArray(items) && items.length > 0) {
      for (const item of items) {
        message += `‚Ä¢ ${item.name || '–¢–æ–≤–∞—Ä'} x ${item.quantity} = ${item.total} ‚Ç∏\n`;
      }
    } else {
      message += `‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n`;
    }
    
    message += `\nüìÖ *–î–∞—Ç–∞*: ${new Date().toLocaleString('ru-RU')}\n`;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω")
    const keyboard = {
      inline_keyboard: [
        [
          { text: '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏', callback_data: `view:${order.id}:details` }
        ],
        [
          { text: '–í —Å–±–æ—Ä–∫—É', callback_data: `status:${order.id}:1` },
          { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: `status:${order.id}:2` }
        ],
        [
          { text: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `status:${order.id}:3` },
          { text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `status:${order.id}:4` }
        ]
      ]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error.message);
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { bot };

export default {
  sendOrderNotification
};
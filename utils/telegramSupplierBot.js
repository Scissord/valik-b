import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import * as Order from '#models/order.js';
import * as OrderItem from '#models/order_item.js';
import * as Product from '#models/product.js';
import * as Supplier from '#models/supplier.js';
import * as User from '#models/user.js';
import * as telegramAuth from './telegramAuth.js';

dotenv.config();

const token = process.env.TELEGRAM_SUPPLIER_BOT_TOKEN;

let bot;

try {
  if (token) {
    bot = new TelegramBot(token, { polling: true });
    setupBotCommands();
  }
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', error.message);
}

function setupBotCommands() {
  if (!bot) return;

  bot.onText(/\/start/, async msg => {
    const userId = msg.chat.id;

    try {
      const session = await telegramAuth.autoAuthByTelegramId(userId);
      if (session && session.role === 'supplier') {
        const name = session.user.name || session.user.login || '';
        bot.sendMessage(userId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫.`);
        sendSupplierMainMenu(userId, '–ü–∞–Ω–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:');
        return;
      } else if (session && (session.role === 'client' || session.role === 'admin')) {
        bot.sendMessage(userId, '–≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞.');
        telegramAuth.logout(userId);
        return;
      }
    } catch (e) {}

    if (telegramAuth.isAuthenticated(userId)) {
      const role = telegramAuth.getUserRole(userId);
      if (role === 'supplier') {
        sendSupplierMainMenu(userId, '–ü–∞–Ω–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:');
      } else {
        bot.sendMessage(userId, '–≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.');
        telegramAuth.logout(userId);
      }
    } else {
      sendAuthMenu(userId, '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:');
    }
  });

  bot.onText(/\/help/, msg => {
    const userId = msg.chat.id;
    let text = '–ö–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:\n\n';
    text += '/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n';
    text += '/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n';
    text += '/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n';
    text += '/logout - –í—ã—Ö–æ–¥\n';
    bot.sendMessage(userId, text);
  });

  bot.onText(/\/menu/, msg => {
    const userId = msg.chat.id;
    if (telegramAuth.isAuthenticated(userId) && telegramAuth.getUserRole(userId) === 'supplier') {
      sendSupplierMainMenu(userId, '–ü–∞–Ω–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:');
    } else {
      sendAuthMenu(userId, '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:');
    }
  });

  bot.onText(/\/logout/, msg => {
    const userId = msg.chat.id;
    telegramAuth.logout(userId);
    bot.sendMessage(userId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.');
    sendAuthMenu(userId, '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:');
  });

  bot.on('message', async msg => {
    if (!msg.text || msg.text.startsWith('/')) return;

    const userId = msg.chat.id;
    const session = telegramAuth.getSession(userId);
    if (!session || !session.authState) return;

    if (session.authState === 'awaiting_supplier_login') {
      session.login = msg.text.trim();
      session.authState = 'awaiting_supplier_password';
      bot.sendMessage(userId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:');
    } else if (session.authState === 'awaiting_supplier_password') {
      const password = msg.text.trim();
      const login = session.login;

      const authData = await telegramAuth.authSupplier(login, password);

      delete session.authState;
      delete session.login;

      if (authData) {
        try {
          await Supplier.update(authData.user.id, { telegram_id: String(userId) });
        } catch (e) {}
        telegramAuth.createSession(userId, authData);
        bot.sendMessage(userId, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É—Å–ø–µ—à–Ω–∞!');
        sendSupplierMainMenu(userId, '–ü–∞–Ω–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:');
      } else {
        bot.sendMessage(userId, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.');
        sendAuthMenu(userId, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
      }
    }
  });

  bot.on('callback_query', async callbackQuery => {
    const data = callbackQuery.data;
    const msg = callbackQuery.message;
    const userId = msg.chat.id;

    const [action, id, value] = data.split(':');

    try {
      if (action === 'auth') {
        if (id === 'supplier') {
          telegramAuth.startAdminAuthProcess(userId); // –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º
          const session = telegramAuth.getSession(userId) || telegramAuth.createSession(userId, {});
          session.authState = 'awaiting_supplier_login';
          bot.sendMessage(userId, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:');
          bot.answerCallbackQuery(callbackQuery.id);
        }
        return;
      }

      if (!telegramAuth.isAuthenticated(userId) || telegramAuth.getUserRole(userId) !== 'supplier') {
        bot.sendMessage(userId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫.');
        sendAuthMenu(userId, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:');
        bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      if (action === 'supplier') {
        if (id === 'items') {
          await showSupplierItems(userId);
        } else if (id === 'filter') {
          await sendSupplierFilterMenu(userId);
        } else if (id === 'back_to_menu') {
          sendSupplierMainMenu(userId, '–ü–∞–Ω–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:');
        } else if (id === 'item') {
          await showSupplierItem(userId, value);
        }
      } else if (action === 'itemstatus') {
        const itemId = id;
        const newStatus = parseInt(value);
        await changeItemStatus(userId, itemId, newStatus);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:', error);
      bot.sendMessage(userId, `–û—à–∏–±–∫–∞: ${error.message}`);
    }

    bot.answerCallbackQuery(callbackQuery.id);
  });
}

async function sendAuthMenu(chatId, message) {
  const keyboard = { inline_keyboard: [[{ text: '–í–æ–π—Ç–∏ –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫', callback_data: 'auth:supplier' }]] };
  bot.sendMessage(chatId, message, { reply_markup: keyboard });
}

async function sendSupplierMainMenu(chatId, message) {
  const keyboard = {
    inline_keyboard: [
      [{ text: '–ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏', callback_data: 'supplier:items' }],
      [{ text: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É', callback_data: 'supplier:filter' }],
      [{ text: '–í—ã–π—Ç–∏', callback_data: 'logout' }]
    ]
  };
  bot.sendMessage(chatId, message, { reply_markup: keyboard });
}

async function sendSupplierFilterMenu(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: '–û–∂–∏–¥–∞–µ—Ç', callback_data: 'supplier:items:0' },
        { text: '–í —Å–±–æ—Ä–∫–µ', callback_data: 'supplier:items:1' }
      ],
      [
        { text: '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ', callback_data: 'supplier:items:2' },
        { text: '–í –ø—É—Ç–∏', callback_data: 'supplier:items:3' }
      ],
      [
        { text: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: 'supplier:items:4' },
        { text: '–û—Ç–º–µ–Ω–µ–Ω', callback_data: 'supplier:items:5' }
      ],
      [{ text: '–ù–∞–∑–∞–¥', callback_data: 'supplier:back_to_menu' }]
    ]
  };
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:', { reply_markup: keyboard });
}

async function showSupplierItems(chatId, status) {
  const session = telegramAuth.getSession(chatId);
  const supplierId = session?.user?.id;
  if (!supplierId) {
    bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
    return;
  }

  const items = await OrderItem.getForSupplier(supplierId, { status, limit: 20, page: 1 });
  if (!items || items.length === 0) {
    bot.sendMessage(chatId, '–ü–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    return;
  }

  let message = '*–í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏:*';
  const keyboard = { inline_keyboard: [] };

  for (const item of items) {
    const product = await Product.find(item.product_id);
    const name = product ? (product.title || product.name) : `–¢–æ–≤–∞—Ä #${item.product_id}`;
    message += `#${item.id} ‚Ä¢ ${name} ‚Ä¢ ${item.quantity} —à—Ç. ‚Ä¢ ${item.total} ‚Ç∏\n`;
    keyboard.inline_keyboard.push([
      { text: `–ü–æ–∑–∏—Ü–∏—è #${item.id}`, callback_data: `supplier:item:${item.id}` }
    ]);
  }

  keyboard.inline_keyboard.push([{ text: '–í –º–µ–Ω—é', callback_data: 'supplier:back_to_menu' }]);

  bot.sendMessage(chatId, message, { parse_mode: 'Markdown', reply_markup: keyboard });
}

async function showSupplierItem(chatId, itemId) {
  const item = await OrderItem.find(itemId);
  if (!item) {
    bot.sendMessage(chatId, '–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
  const product = await Product.find(item.product_id);
  const productName = product ? (product.title || product.name) : `–¢–æ–≤–∞—Ä #${item.product_id}`;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
  const order = await Order.find(item.order_id);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
  let clientInfo = '–ù–µ —É–∫–∞–∑–∞–Ω';
  let clientPhone = '';
  if (order && order.user_id) {
    const client = await User.find(order.user_id);
    if (client) {
      clientInfo = client.name || client.login || `ID: ${client.id}`;
      if (client.phone) {
        clientPhone = client.phone;
      }
    }
  }

  let message = `üõçÔ∏è *–ü–æ–∑–∏—Ü–∏—è #${item.id}*\n\n`;
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
  message += `üì¶ *–¢–æ–≤–∞—Ä:* ${productName}\n`;
  if (product) {
    if (product.article) message += `üè∑Ô∏è *–ê—Ä—Ç–∏–∫—É–ª:* ${product.article}\n`;
    if (product.price) message += `üí∞ *–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:* ${product.price} ‚Ç∏\n`;
    if (product.description) {
      const shortDesc = product.description.length > 100 
        ? product.description.substring(0, 100) + '...' 
        : product.description;
      message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${shortDesc}\n`;
    }
  }
  
  message += `\nüìä *–î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏:*\n`;
  message += `üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${item.quantity}\n`;
  message += `üíµ *–°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏:* ${item.total} ‚Ç∏\n`;
  message += `üìã *–°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏:* ${item.status}\n`;
  
  message += `\nüõí *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:*\n`;
  message += `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${clientInfo}\n`;
  if (clientPhone) {
    message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${clientPhone}\n`;
  }

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üîß –í —Å–±–æ—Ä–∫–µ', callback_data: `itemstatus:${item.id}:1` },
        { text: 'üì¶ –ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ', callback_data: `itemstatus:${item.id}:2` }
      ],
      [
        { text: 'üöö –í –ø—É—Ç–∏', callback_data: `itemstatus:${item.id}:3` },
        { text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: `itemstatus:${item.id}:4` }
      ],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `itemstatus:${item.id}:5` }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'supplier:items' }]
    ]
  };

  bot.sendMessage(chatId, message, { parse_mode: 'Markdown', reply_markup: keyboard });
}

async function changeItemStatus(chatId, itemId, status) {
  try {
    const session = telegramAuth.getSession(chatId);
    const supplierId = session?.user?.id;
    const updated = await OrderItem.updateStatusOwned(itemId, supplierId, status);
    if (!updated) {
      bot.sendMessage(chatId, '–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.');
      return;
    }

    await Order.updateStatusIfAllItems(updated.order_id, status);

    bot.sendMessage(chatId, `–°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏ #${itemId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}.`);
    await showSupplierItem(chatId, itemId);
  } catch (e) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.');
  }
}

export { bot };

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
 * @param {Object} order - –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
 * @param {Array} items - –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
 */
export const sendOrderNotification = async (order, items) => {
  if (!bot) {
    console.error('Telegram –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_SUPPLIER_BOT_TOKEN');
    return;
  }

  try {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    const supplierItems = {};
    
    for (const item of items) {
      const product = await Product.find(item.product_id);
      if (product && product.supplier_id) {
        if (!supplierItems[product.supplier_id]) {
          supplierItems[product.supplier_id] = [];
        }
        supplierItems[product.supplier_id].push({
          ...item,
          product_name: product.title || product.name || `–¢–æ–≤–∞—Ä #${product.id}`
        });
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    const client = await User.find(order.user_id);
    const clientName = client ? (client.name || client.login || '–ö–ª–∏–µ–Ω—Ç') : '–ö–ª–∏–µ–Ω—Ç';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    for (const [supplierId, supplierItemsList] of Object.entries(supplierItems)) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        const supplier = await Supplier.find(supplierId);
        if (!supplier || !supplier.telegram_id) {
          console.log(`–ü–æ—Å—Ç–∞–≤—â–∏–∫ ${supplierId} –Ω–µ –∏–º–µ–µ—Ç Telegram ID`);
          continue;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        let message = `üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*\n\n`;
        message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientName}\n`;
        message += `üìÖ –î–∞—Ç–∞: ${new Date(order.created_at).toLocaleString('ru-RU')}\n\n`;
        message += `üì¶ *–í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏:*\n`;

        let totalSupplierAmount = 0;
        for (const item of supplierItemsList) {
          message += `‚Ä¢ ${item.product_name}\n`;
          message += `  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\n`;
          message += `  –°—É–º–º–∞: ${item.total} ‚Ç∏\n\n`;
          totalSupplierAmount += parseFloat(item.total) || 0;
        }

        message += `üí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –≤–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π: ${totalSupplierAmount} ‚Ç∏*\n\n`;
        message += `üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏`;

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        const keyboard = {
          inline_keyboard: [
            [
              { text: '–ú–æ–∏ –ø–æ–∑–∏—Ü–∏–∏', callback_data: 'supplier:items' }
            ],
            [
              { text: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É', callback_data: 'supplier:filter' }
            ]
          ]
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
        await bot.sendMessage(supplier.telegram_id, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });

        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #${order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É ${supplier.name || supplier.login}`);

      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫—É ${supplierId}:`, err.message);
      }
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º:', error.message);
  }
};
